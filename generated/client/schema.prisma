// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../../generated/client" // relative to schema.prisma
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                     String                  @id @default(cuid())
  name                   String?
  firstName              String?
  lastName               String?
  email                  String                  @unique
  emailVerified          DateTime?
  image                  String?
  password               String?
  status                 UserStatus              @default(ACTIVE)
  role                   UserRole                @default(EMPLOYEE)
  employmentType         EmploymentType          @default(FULL_TIME)
  jobStartDate           DateTime?
  jobEndDate             DateTime?
  departmentId           String?
  department             Department?             @relation(fields: [departmentId], references: [id])
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  candidateNotes         CandidateNote[]
  jobApplicationHistory  JobApplicationHistory[]
  accounts               Account[]
  sessions               Session[]
  statusHistory          UserStatusHistory[]
  statusChangesBy        UserStatusHistory[]     @relation("StatusChangedBy")
  personalInfo           PersonalInfo?
  documents              Document[]
  documentReviews        DocumentVerification[]  @relation("ReviewedBy")
  DocumentVerification   DocumentVerification[]
  OnboardingProgress     OnboardingProgress?
  emergencyContacts      EmergencyContact[]
  dependentMembers       DependentMember[]
  emails                 UserEmail[]
  phones                 UserPhone[]
  managedOnboardings     OnboardingProgress[]    @relation("ManagedOnboardings")
  managerId              String?
  manager                User?                   @relation("ManagerEmployees", fields: [managerId], references: [id])
  employees              User[]                  @relation("ManagerEmployees")
  requestsMade           Request[]               @relation("RequestsMade")
  requestsToManage       Request[]               @relation("RequestsToManage")
  requestHistory         RequestStatusHistory[]
  leavesRequested        LeaveRequest[]          @relation("EmployeeLeaves")
  leavesToApprove        LeaveRequest[]          @relation("ManagerLeaves")
  leaveStatusHistory     LeaveStatusHistory[]
  managedProjects        Project[]               @relation("ProjectManager")
  projectMemberships     ProjectMember[]
  timeEntries            TimeEntry[]
  shifts                 ShiftEntry[]
  announcementsChanged   Announcement[]          @relation("changedByUser")
  announcementsPublished Announcement[]          @relation("publishedByUser")
  position               Position?               @relation(fields: [positionId], references: [id])
  positionId             String?
  locationId             String?
  location               Location?               @relation(fields: [locationId], references: [id])

  @@index([departmentId])
  @@index([locationId])
}

model UserStatusHistory {
  id          Int        @id @default(autoincrement())
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  status      UserStatus
  comment     String?    @db.Text
  createdAt   DateTime   @default(now())
  changedBy   User       @relation("StatusChangedBy", fields: [changedById], references: [id])
  changedById String

  @@index([userId])
}

model CandidateNote {
  id          Int       @id @default(autoincrement())
  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  content     String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User      @relation(fields: [userId], references: [id])
  userId      String

  @@index([candidateId])
}

model JobListing {
  id             Int              @id @default(autoincrement())
  title          String
  description    String
  employmentType EmploymentType   @default(FULL_TIME)
  workplaceType  WorkplaceType    @default(ON_SITE)
  referralSource String?
  startDate      DateTime
  endDate        DateTime?
  status         JobStatus        @default(ACTIVE)
  departmentId   String?
  department     Department?      @relation(fields: [departmentId], references: [id])
  locationId     String?
  location       Location?        @relation(fields: [locationId], references: [id])
  keywords       String[]         @default([])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  applications   JobApplication[]
  position       Position?        @relation(fields: [positionId], references: [id])
  positionId     String?

  @@index([departmentId])
  @@index([locationId])
  @@index([status])
}

model Candidate {
  id           String           @id @default(cuid())
  name         String
  surname      String
  email        String           @unique
  phone        String
  linkedin     String?
  github       String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  applications JobApplication[]
  notes        CandidateNote[]
}

model JobApplication {
  id              Int                     @id @default(autoincrement())
  candidateId     String
  candidate       Candidate               @relation(fields: [candidateId], references: [id])
  resumeKey       String?
  additionalNotes String?                 @db.Text
  referralSource  String?
  status          ApplicationStatus       @default(PENDING)
  jobListingId    Int
  jobListing      JobListing              @relation(fields: [jobListingId], references: [id])
  createdAt       DateTime                @default(now())
  history         JobApplicationHistory[]
  cvAnalysis      CvAnalysis?

  OnboardingProgress   OnboardingProgress?
  OnboardingInvitation OnboardingInvitation?

  @@index([candidateId])
  @@index([jobListingId])
}

model CvAnalysis {
  id              Int            @id @default(autoincrement())
  applicationId   Int            @unique
  application     JobApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  totalScore      Float?
  technicalScore  Float?
  experienceScore Float?
  educationScore  Float?
  cvQualityScore  Float?
  softSkillsScore Float?
  analysis        String?        @db.Text
  parsedContent   Json?
  error           String?        @db.Text
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([applicationId])
}

model JobApplicationHistory {
  id              Int               @id @default(autoincrement())
  applicationId   Int
  application     JobApplication    @relation(fields: [applicationId], references: [id])
  status          ApplicationStatus
  comment         String?           @db.Text
  createdAt       DateTime          @default(now())
  changedByUserId String?
  changedBy       User?             @relation(fields: [changedByUserId], references: [id])
}

model PersonalInfo {
  id     Int    @id @default(autoincrement())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  // Identity Documents

  amka String? @unique
  afm  String? @unique
  doy  String?

  identificationDocuments IdentificationDocument[]

  // Basic Personal Info
  middleName       String?
  birthDate        DateTime
  birthPlace       String
  maritalStatus    MaritalStatus @default(SINGLE)
  numberOfChildren Int           @default(0)

  // Addresses 
  addresses Address[]

  citizenship String?
  nationality String?
  gender      Gender?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Education
  educationLevel       EducationLevel?
  educationTitle       String?
  educationInstitution String?
  graduationYear       Int?

  // Bank Accounts
  bankAccounts BankAccount[]

  // Language Skills
  languageSkills LanguageSkill[]
}

model IdentificationDocument {
  id               Int                        @id @default(autoincrement())
  personalInfoId   Int
  personalInfo     PersonalInfo               @relation(fields: [personalInfoId], references: [id], onDelete: Cascade)
  type             IdentificationDocumentType
  documentNumber   String
  issueDate        DateTime
  expiryDate       DateTime? // Required for passport and residence permit
  issuingAuthority String
  isPrimary        Boolean                    @default(false)
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @updatedAt

  @@unique([personalInfoId, documentNumber])
  @@index([personalInfoId])
}

model Address {
  id             Int          @id @default(autoincrement())
  personalInfo   PersonalInfo @relation(fields: [personalInfoId], references: [id], onDelete: Cascade)
  personalInfoId Int
  type           AddressType  @default(PERMANENT)
  street         String
  streetNumber   String
  city           String
  region         String
  postalCode     String
  country        String
  isPrimary      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([personalInfoId])
}

model Document {
  id                Int                   @id @default(autoincrement())
  userId            String
  user              User                  @relation(fields: [userId], references: [id])
  type              DocumentType
  key               String
  uploadedAt        DateTime              @default(now())
  dependentMemberId Int?
  dependentMember   DependentMember?      @relation(fields: [dependentMemberId], references: [id])
  verification      DocumentVerification?
  languageSkill     LanguageSkill?        @relation("LanguageCertificates", fields: [languageSkillId], references: [id])
  languageSkillId   Int?

  @@index([languageSkillId])
}

model DocumentVerification {
  id           Int                @id @default(autoincrement())
  documentId   Int                @unique
  document     Document           @relation(fields: [documentId], references: [id])
  status       VerificationStatus @default(PENDING)
  reviewedById String
  reviewedBy   User               @relation("ReviewedBy", fields: [reviewedById], references: [id])
  comments     String?            @db.Text
  reviewedAt   DateTime?
  User         User?              @relation(fields: [userId], references: [id])
  userId       String?

  @@index([status])
}

model OnboardingProgress {
  id              Int              @id @default(autoincrement())
  userId          String           @unique
  user            User             @relation(fields: [userId], references: [id])
  application     JobApplication   @relation(fields: [applicationId], references: [id])
  applicationId   Int              @unique
  currentPhase    Phase            @default(PERSONAL_INFO)
  startedAt       DateTime         @default(now())
  completedAt     DateTime?
  status          OnboardingStatus @default(IN_PROGRESS)
  hireDate        DateTime
  hiringManagerId String
  hiringManager   User             @relation("ManagedOnboardings", fields: [hiringManagerId], references: [id])
  contract        Contract?

  @@index([userId])
  @@index([status])
  @@index([hiringManagerId])
}

model OnboardingInvitation {
  id               String         @id @default(cuid())
  email            String
  token            String         @unique
  otp              String?
  otpExpiresAt     DateTime?
  applicationId    Int            @unique
  application      JobApplication @relation(fields: [applicationId], references: [id])
  expiresAt        DateTime
  verifiedAt       DateTime?
  lastAccessedAt   DateTime       @default(now())
  sessionToken     String?        @unique // Store session token after first verification
  sessionExpiresAt DateTime?
  createdAt        DateTime       @default(now())
}

model EmergencyContact {
  id             Int      @id @default(autoincrement())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullName       String
  relationship   String
  primaryPhone   String
  secondaryPhone String?
  email          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model DependentMember {
  id           Int        @id @default(autoincrement())
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName    String
  lastName     String
  middleName   String?
  birthDate    DateTime
  relationship String
  isStudent    Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Document     Document[]

  @@index([userId])
}

model UserEmail {
  id        Int       @id @default(autoincrement())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  email     String    @unique
  type      EmailType
  isPrimary Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
}

model UserPhone {
  id          Int       @id @default(autoincrement())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  phoneNumber String
  countryCode String    @default("30") // Default to Greek country code
  type        PhoneType
  isPrimary   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
}

model BankAccount {
  id             Int          @id @default(autoincrement())
  personalInfoId Int
  personalInfo   PersonalInfo @relation(fields: [personalInfoId], references: [id], onDelete: Cascade)
  bank           GreekBank    @default(PIRAEUS_BANK)
  iban           String       @unique
  isPrimary      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([personalInfoId])
}

model Contract {
  id           Int                @id @default(autoincrement())
  onboardingId Int                @unique
  onboarding   OnboardingProgress @relation(fields: [onboardingId], references: [id])
  draftKey     String? // For the unsigned contract uploaded by hiring manager
  signedKey    String? // For the signed contract uploaded by user
  uploadedAt   DateTime           @default(now())
  signedAt     DateTime?
  status       ContractStatus     @default(PENDING)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model LanguageSkill {
  id             Int          @id @default(autoincrement())
  personalInfoId Int
  personalInfo   PersonalInfo @relation(fields: [personalInfoId], references: [id], onDelete: Cascade)
  language       Language
  proficiency    Proficiency
  certificate    String? // For storing certification name (e.g., "Cambridge C2", "DELF B2")
  issueDate      DateTime? // When the certificate was issued
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  documents      Document[]   @relation("LanguageCertificates")

  @@index([personalInfoId])
}

model Request {
  id          String        @id @default(cuid())
  title       String
  description String        @db.Text
  status      RequestStatus @default(PENDING)

  requesterId String
  requester   User   @relation("RequestsMade", fields: [requesterId], references: [id])

  managerId String
  manager   User   @relation("RequestsToManage", fields: [managerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  attachments          RequestAttachment[]
  RequestStatusHistory RequestStatusHistory[]

  @@index([requesterId])
  @@index([managerId])
  @@index([status])
}

model RequestStatusHistory {
  id          Int                @id @default(autoincrement())
  requestId   String
  request     Request            @relation(fields: [requestId], references: [id], onDelete: Cascade)
  status      RequestStatus
  comment     String?            @db.Text
  changedBy   String
  user        User               @relation(fields: [changedBy], references: [id])
  createdAt   DateTime           @default(now())
  attachments StatusAttachment[]

  @@index([requestId])
}

model StatusAttachment {
  id         Int                  @id @default(autoincrement())
  historyId  Int
  history    RequestStatusHistory @relation(fields: [historyId], references: [id], onDelete: Cascade)
  fileName   String
  fileKey    String
  fileType   String
  uploadedAt DateTime             @default(now())

  @@index([historyId])
}

model RequestAttachment {
  id         Int      @id @default(autoincrement())
  requestId  String
  request    Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  fileName   String
  fileKey    String
  fileType   String
  uploadedAt DateTime @default(now())

  @@index([requestId])
}

// Leave Models

model LeaveRequest {
  id            String               @id @default(cuid())
  employeeId    String
  employee      User                 @relation("EmployeeLeaves", fields: [employeeId], references: [id])
  managerId     String
  manager       User                 @relation("ManagerLeaves", fields: [managerId], references: [id])
  type          LeaveType
  startDate     DateTime
  endDate       DateTime
  duration      Float // In days
  reason        String?              @db.Text
  status        LeaveStatus          @default(PENDING)
  attachments   LeaveAttachment[]
  statusHistory LeaveStatusHistory[]
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt

  @@index([employeeId])
  @@index([managerId])
  @@index([status])
}

model LeaveAttachment {
  id         Int          @id @default(autoincrement())
  leaveId    String
  leave      LeaveRequest @relation(fields: [leaveId], references: [id], onDelete: Cascade)
  fileName   String
  fileKey    String
  fileType   String
  uploadedAt DateTime     @default(now())

  @@index([leaveId])
}

model LeaveStatusHistory {
  id          Int                     @id @default(autoincrement())
  leaveId     String
  leave       LeaveRequest            @relation(fields: [leaveId], references: [id], onDelete: Cascade)
  status      LeaveStatus
  comment     String?                 @db.Text
  changedById String
  changedBy   User                    @relation(fields: [changedById], references: [id])
  createdAt   DateTime                @default(now())
  attachments LeaveStatusAttachment[]

  @@index([leaveId])
}

model LeaveStatusAttachment {
  id         Int                @id @default(autoincrement())
  historyId  Int
  history    LeaveStatusHistory @relation(fields: [historyId], references: [id], onDelete: Cascade)
  fileName   String
  fileKey    String
  fileType   String
  uploadedAt DateTime           @default(now())

  @@index([historyId])
}

model Holiday {
  id        String   @id @default(cuid())
  name      String
  date      DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([date])
  @@index([isActive])
}

model Department {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?      @db.Text
  users       User[]
  JobListing  JobListing[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Location {
  id         String       @id @default(cuid())
  name       String
  address    String
  city       String
  region     String
  postalCode String
  country    String       @default("GR")
  isActive   Boolean      @default(true)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  users      User[]
  JobListing JobListing[]

  @@unique([name, city])
  @@index([city])
}

model Position {
  id          String       @id @default(cuid())
  title       String
  code        String       @unique
  isActive    Boolean      @default(true)
  users       User[]
  jobListings JobListing[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([isActive])
}

model Client {
  id        String       @id @default(cuid())
  name      String
  vatNumber String       @unique
  email     String?
  phone     String?
  address   String?
  status    ClientStatus @default(ACTIVE)
  projects  Project[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@index([status])
}

model Project {
  id          String          @id @default(cuid())
  name        String
  description String?         @db.Text
  clientId    String
  client      Client          @relation(fields: [clientId], references: [id])
  status      ProjectStatus   @default(ACTIVE)
  startDate   DateTime
  endDate     DateTime?
  managerId   String
  manager     User            @relation("ProjectManager", fields: [managerId], references: [id])
  members     ProjectMember[]
  timeEntries TimeEntry[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([clientId])
  @@index([managerId])
  @@index([status])
}

model ProjectMember {
  id        String            @id @default(cuid())
  projectId String
  project   Project           @relation(fields: [projectId], references: [id])
  userId    String
  user      User              @relation(fields: [userId], references: [id])
  role      ProjectMemberRole @default(MEMBER)
  joinedAt  DateTime          @default(now())
  leftAt    DateTime?

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
}

model TimeEntry {
  id          String          @id @default(cuid())
  projectId   String
  project     Project         @relation(fields: [projectId], references: [id])
  userId      String
  user        User            @relation(fields: [userId], references: [id])
  description String          @db.Text
  startTime   DateTime
  endTime     DateTime?
  duration    Int
  status      TimeEntryStatus @default(PENDING)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([projectId])
  @@index([userId])
  @@index([status])
}

model Announcement {
  id              String   @id @default(cuid())
  title           String
  content         String   @db.Text
  publishedAt     DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  changedBy       String
  publishedBy     String
  changedByUser   User     @relation("changedByUser", fields: [changedBy], references: [id])
  publishedByUser User     @relation("publishedByUser", fields: [publishedBy], references: [id])
}

// Working Schedule Models

model TimeSchedule {
  id        String  @id @default(cuid())
  name      String // e.g., "Πρωινή Βάρδια 9-17:30"
  startTime String // e.g.: "09:00"
  endTime   String // e.g.: "17:30"
  isActive  Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shifts ShiftEntry[]

  @@unique([name, startTime, endTime])
  @@index([isActive])
}

model ShiftEntry {
  id            String        @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  scheduleId    String
  schedule      TimeSchedule  @relation(fields: [scheduleId], references: [id], onDelete: Restrict)
  date          DateTime
  status        ShiftStatus   @default(SCHEDULED)
  isNightShift  Boolean       @default(false)
  workplaceType WorkplaceType @default(ON_SITE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, scheduleId, date])
  @@index([userId])
  @@index([scheduleId])
  @@index([date])
}

model CompanySettings {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  logoUrl    String?  @db.Text
  url        String?  @db.VarChar(255)
  address    String   @db.Text
  postalCode String   @db.VarChar(20)
  city       String   @db.VarChar(100)
  region     String   @db.VarChar(100)
  country    String   @db.VarChar(2)
  phone      String?  @db.VarChar(20)
  email      String?  @db.VarChar(255)
  timezone   String   @db.VarChar(100)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CareerSettings {
  id                    Int      @id @default(autoincrement())
  logoUrl               String?  @db.Text
  headerButtonText      String?  @db.VarChar(100)
  headerButtonUrl       String?  @db.Text
  headerButtonBgColor   String?  @db.VarChar(20)
  headerButtonTextColor String?  @db.VarChar(20)
  bannerText            String?  @db.Text
  bannerBgColor         String?  @db.VarChar(20)
  bannerTextColor       String?  @db.VarChar(20)
  showCvBanner          Boolean  @default(false)
  cvBannerUrl           String?  @db.Text
  cvBannerTitle         String?  @db.VarChar(255)
  cvBannerSubtitle      String?  @db.VarChar(255)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

//ENUMS

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  TEMPORARY
  OTHER
  VOLUNTEER
  INTERNSHIP
}

enum WorkplaceType {
  ON_SITE
  HYBRID
  REMOTE
}

enum JobStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

enum ApplicationStatus {
  PENDING
  REVIEW
  INTERVIEWING
  OFFERED
  ONBOARDING
  HIRED
  REJECTED
}

enum UserRole {
  ONBOARDING_EMPLOYEE
  EMPLOYEE
  HR
  EXTERNAL_ACCOUNTANT
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum DocumentType {
  AMKA
  AFM
  ID_CARD
  PASSPORT
  RESIDENCE_PERMIT
  MILITARY_DOC
  DEGREE
  BANK_ACCOUNT
  STUDENT_CERTIFICATE
  FAMILY_STATUS // Οικογενειακή κατάσταση
  INSURANCE_RECORD // Ένσημα
  INSURANCE_REGISTRATION_CERT // Βεβαίωση απογραφής άμεσα ασφαλισμένου
  TAX_REGISTRY_CERT // Στοιχεία Μητρώου Φυσικού Προσώπου
  LANGUAGE_CERTIFICATE
  OTHER
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
  NEEDS_REVISION
}

enum OnboardingStatus {
  IN_PROGRESS
  COMPLETED
  REJECTED
}

enum Phase {
  PERSONAL_INFO // Basic information, emergency contacts
  IDENTITY_DOCS // ID, AFM, AMKA
  EMPLOYMENT_DOCS // Contracts, certificates
  BANK_INFO // Bank account for salary
  COMPLETED
}

enum MaritalStatus {
  SINGLE // Άγαμος/η
  MARRIED // Έγγαμος/η
  DIVORCED // Διαζευγμένος/η
  WIDOWED // Χήρος/α
  CIVIL_PARTNERSHIP // Σύμφωνο Συμβίωσης
}

enum AddressType {
  PERMANENT // Μόνιμη Κατοικία
  TEMPORARY // Προσωρινή Κατοικία
  WORK // Διεύθυνση Εργασίας
  POSTAL // Ταχυδρομική Διεύθυνση
  FAMILY // Οικογενειακή Κατοικία
  OTHER // Άλλο
}

enum EmailType {
  PERSONAL // Προσωπικό
  WORK // Εργασιακό
  OTHER // Άλλο
}

enum PhoneType {
  PERSONAL // Προσωπικό
  WORK // Εργασίας
  HOME // Σταθερό
  OTHER // Άλλο
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum IdentificationDocumentType {
  ID_CARD // Δελτίο Ταυτότητας
  PASSPORT // Διαβατήριο
  RESIDENCE_PERMIT // Άδεια Παραμονής
}

enum EducationLevel {
  PRIMARY // Πρωτοβάθμια
  SECONDARY // Δευτεροβάθμια
  POST_SECONDARY // Μεταδευτεροβάθμια (ΙΕΚ)
  BACHELOR // Πτυχίο
  MASTER // Μεταπτυχιακό
  PHD // Διδακτορικό
}

enum GreekBank {
  NATIONAL_BANK // Εθνική Τράπεζα
  ALPHA_BANK // Alpha Bank
  PIRAEUS_BANK // Τράπεζα Πειραιώς
  EUROBANK // Eurobank
  ATTICA_BANK // Attica Bank
  OPTIMA_BANK // Optima Bank
  PANCRETA_BANK // Παγκρήτια Τράπεζα
  OTHER // Άλλη Τράπεζα
}

enum ContractStatus {
  PENDING // Contract not uploaded yet
  UPLOADED // Contract uploaded by hiring manager
  SIGNED // Contract signed and uploaded by user
  REJECTED // Contract rejected
}

enum Language {
  ENGLISH
  FRENCH
  GERMAN
  SPANISH
  ITALIAN
  RUSSIAN
  CHINESE
  ARABIC
  TURKISH
  BULGARIAN
  ROMANIAN
  ALBANIAN
  OTHER
}

enum Proficiency {
  A1 // Beginner
  A2 // Elementary
  B1 // Intermediate
  B2 // Upper Intermediate
  C1 // Advanced
  C2 // Mastery
  NATIVE // Native Speaker
}

enum RequestStatus {
  PENDING // Σε εκκρεμότητα
  IN_REVIEW // Υπό εξέταση
  APPROVED // Εγκρίθηκε
  REJECTED // Απορρίφθηκε
  CANCELLED // Ακυρώθηκε
}

enum RequestPriority {
  LOW // Χαμηλή
  MEDIUM // Μεσαία
  HIGH // Υψηλή
  URGENT // Επείγον
}

// Leave Types

enum LeaveType {
  // Άδειες Εργαζομένων

  ANNUAL // Κανονική Άδεια
  UNPAID // Άδεια Άνευ Αποδοχών
  SICK // Αναρρωτική άδεια
  EXAM // Άδεια εξετάσεων εργαζομένων σπουδαστών
  POSTGRADUATE_EXAM // Άδεια εξετάσεων μεταπτυχιακών φοιτητών
  BLOOD_DONATION // Αιμοδοτική άδεια
  MARRIAGE // Άδεια γάμου
  BEREAVEMENT // Άδεια πένθους

  // Άδειες μητρότητας/πατρότητας/φροντιστή
  MATERNITY // Άδεια μητρότητας
  SPECIAL_MATERNITY // Ειδική παροχή προστασίας της μητρότητας
  PATERNITY // Άδεια πατρότητας
  CHILD_CARE // Άδεια φροντίδας παιδιού (μειωμένο ωράριο)
  PARENTAL // Γονική άδεια
  CAREGIVER // Άδεια φροντιστή
  FORCE_MAJEURE // Απουσία από την εργασία για λόγους ανωτέρας βίας
  FLEXIBLE_WORK // Ευέλικτες ρυθμίσεις εργασίας
  IVF // Άδεια για υποβολή σε μεθόδους ιατρικώς υποβοηθούμενης αναπαραγωγής
  PRENATAL_CHECKUP // Άδεια προγεννητικών εξετάσεων

  // Υγεία & Εκπαίδευση Παιδιών
  CHILD_ILLNESS // Άδεια λόγω σοβαρών νοσημάτων των παιδιών
  CHILD_HOSPITAL // Άδεια λόγω νοσηλείας των παιδιών
  SCHOOL_VISIT // Άδεια παρακολούθησης σχολικής επίδοσης τέκνου
  DEPENDENT_CARE // Άδεια λόγω ασθένειας παιδιού ή άλλου εξαρτώμενου μέλους

  // Ειδικές Οικογενειακές Περιστάσεις
  SINGLE_PARENT // Άδεια μονογονεϊκών οικογενειών
  DISABLED_CHILD // Μειωμένο ωράριο γονέων παιδιών με αναπηρία
  NIGHT_WORK_EXEMPT // Νυχτερινή εργασία εγκύων, λεχώνων και γαλουχουσών εργαζομένων
  BEREAVED_PARENT // Άδεια πενθούντων γονέων

  // Ιατρικά
  GYNECOLOGICAL_EXAM // Άδεια γυναικολογικού ελέγχου

  OTHER // Άλλο
}

enum LeaveStatus {
  PENDING // Σε εκκρεμότητα
  APPROVED // Εγκρίθηκε
  REJECTED // Απορρίφθηκε
  CANCELLED // Ακυρώθηκε
}

enum ClientStatus {
  ACTIVE // Ενεργός
  INACTIVE // Ανενεργός
  ARCHIVED // Αρχειοθετημένος
}

enum ProjectStatus {
  ACTIVE // Ενεργό
  ON_HOLD // Σε Αναμονή
  COMPLETED // Ολοκληρωμένο
  CANCELLED // Ακυρωμένο
  ARCHIVED // Αρχειοθετημένο
}

enum ProjectMemberRole {
  MANAGER // Υπεύθυνος Έργου
  MEMBER // Μέλος
  VIEWER // Παρατηρητής
}

enum TimeEntryStatus {
  PENDING // Σε Εκκρεμότητα
  APPROVED // Εγκεκριμένη
  REJECTED // Απορριφθείσα
}

enum ShiftStatus {
  SCHEDULED // Προγραμματισμένη
  COMPLETED // Ολοκληρώθηκε
  ABSENT // Απουσία
  LATE // Καθυστέρηση
  ON_LEAVE // Σε Άδεια
}
